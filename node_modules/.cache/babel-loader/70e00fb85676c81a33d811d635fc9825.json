{"ast":null,"code":"var _jsxFileName = \"/Users/brandonhussey/Documents/projects/musicApp/music-app/src/components/player.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faAngleLeft, faAngleRight, faPause } from \"@fortawesome/free-solid-svg-icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Player = ({\n  currentSong,\n  isPlaying,\n  setIsPlaying\n}) => {\n  _s();\n\n  const audioRef = useRef(null);\n\n  const playSongHandler = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying);\n    }\n  };\n\n  const timeUpdateHandler = e => {\n    const currentTime = e.target.currentTime;\n    const duration = e.target.duration;\n    setSongInfo({ ...songInfo,\n      currentTime,\n      duration\n    });\n  };\n\n  const getTime = time => {\n    return Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2);\n  };\n\n  const dragHandler = e => {\n    setSongInfo({ ...songInfo,\n      currentTime: e.target.value\n    });\n    audioRef.current.currentTime = e.target.value;\n  };\n\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0\n  });\n\n  const autoPlayHandler = () => {\n    if (!isPlaying) {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: getTime(songInfo.currentTime)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        onChange: dragHandler,\n        min: 0,\n        max: songInfo.duration,\n        value: songInfo.currentTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: getTime(songInfo.duration)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play-control\",\n      children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        className: \"back\",\n        size: \"2x\",\n        icon: faAngleLeft\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        onClick: playSongHandler,\n        className: \"play\",\n        size: \"2x\",\n        icon: isPlaying ? faPause : faPlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        className: \"next\",\n        size: \"2x\",\n        icon: faAngleRight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      onLoadedData: autoPlayHandler,\n      onTimeUpdate: timeUpdateHandler,\n      onLoadedMetadata: timeUpdateHandler,\n      ref: audioRef,\n      src: currentSong.audio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Player, \"KEZIH2+2kfavtX2nJ+bHWjds3mA=\");\n\n_c = Player;\nexport default Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["/Users/brandonhussey/Documents/projects/musicApp/music-app/src/components/player.js"],"names":["React","useRef","useState","useEffect","FontAwesomeIcon","faPlay","faAngleLeft","faAngleRight","faPause","Player","currentSong","isPlaying","setIsPlaying","audioRef","playSongHandler","current","pause","play","timeUpdateHandler","e","currentTime","target","duration","setSongInfo","songInfo","getTime","time","Math","floor","slice","dragHandler","value","autoPlayHandler","audio"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faPlay,\n  faAngleLeft,\n  faAngleRight,\n  faPause,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nconst Player = ({ currentSong, isPlaying, setIsPlaying }) => {\n  const audioRef = useRef(null);\n\n  const playSongHandler = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying);\n    }\n  };\n  const timeUpdateHandler = (e) => {\n    const currentTime = e.target.currentTime;\n    const duration = e.target.duration;\n    setSongInfo({ ...songInfo, currentTime, duration });\n  };\n  const getTime = (time) => {\n    return (\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\n    );\n  };\n  const dragHandler = (e) => {\n    setSongInfo({ ...songInfo, currentTime: e.target.value });\n    audioRef.current.currentTime = e.target.value;\n  };\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n  });\n  const autoPlayHandler = () => {\n    if (!isPlaying) {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying);\n    }\n  };\n  return (\n    <div className=\"player-container\">\n      <div className=\"time-control\">\n        <p>{getTime(songInfo.currentTime)}</p>\n        <input\n          type=\"range\"\n          onChange={dragHandler}\n          min={0}\n          max={songInfo.duration}\n          value={songInfo.currentTime}\n        />\n        <p>{getTime(songInfo.duration)}</p>\n      </div>\n      <div className=\"play-control\">\n        <FontAwesomeIcon className=\"back\" size=\"2x\" icon={faAngleLeft} />\n        <FontAwesomeIcon\n          onClick={playSongHandler}\n          className=\"play\"\n          size=\"2x\"\n          icon={isPlaying ? faPause : faPlay}\n        />\n        <FontAwesomeIcon className=\"next\" size=\"2x\" icon={faAngleRight} />\n      </div>\n      <audio\n        onLoadedData={autoPlayHandler}\n        onTimeUpdate={timeUpdateHandler}\n        onLoadedMetadata={timeUpdateHandler}\n        ref={audioRef}\n        src={currentSong.audio}\n      ></audio>\n    </div>\n  );\n};\n\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}